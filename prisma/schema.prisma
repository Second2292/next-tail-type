// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(USER)
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Review    Review[]
  Order     Order[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

// Extending the existing Prisma schema with e-commerce models

model Product {
  id             Int               @id @default(autoincrement())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  name           String
  description    String?
  slug           String            @unique
  sku            String            @unique
  price          Decimal           @db.Decimal(10, 2)
  compareAtPrice Decimal?          @db.Decimal(10, 2)
  costPrice      Decimal?          @db.Decimal(10, 2)
  isActive       Boolean           @default(true)
  inventory      Int               @default(0)
  weight         Decimal?          @db.Decimal(8, 2)
  dimensions     Json? // {length, width, height}
  images         ProductImage[]
  categories     CategoryProduct[]
  variants       ProductVariant[]
  reviews        Review[]
  orderItems     OrderItem[]
  featuredIn     Collection[]      @relation("CollectionToProduct")
  tags           ProductTag[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  position  Int      @default(0)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model ProductVariant {
  id         Int                    @id @default(autoincrement())
  name       String
  sku        String                 @unique
  price      Decimal                @db.Decimal(10, 2)
  inventory  Int                    @default(0)
  isActive   Boolean                @default(true)
  product    Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  options    ProductVariantOption[]
  orderItems OrderItem[]
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@index([productId])
}

model ProductOption {
  id        Int                    @id @default(autoincrement())
  name      String // e.g., "Size", "Color", "Material"
  values    ProductOptionValue[]
  variants  ProductVariantOption[]
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

model ProductOptionValue {
  id             Int                    @id @default(autoincrement())
  value          String // e.g., "Red", "XL", "Cotton"
  option         ProductOption          @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId       Int
  variantOptions ProductVariantOption[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@index([optionId])
}

model ProductVariantOption {
  id            Int                @id @default(autoincrement())
  variant       ProductVariant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId     Int
  option        ProductOption      @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId      Int
  optionValue   ProductOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
  optionValueId Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([variantId])
  @@index([optionId])
  @@index([optionValueId])
}

model Category {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  slug        String            @unique
  image       String?
  isActive    Boolean           @default(true)
  parent      Category?         @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[]        @relation("CategoryToCategory")
  products    CategoryProduct[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([parentId])
}

model CategoryProduct {
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  createdAt  DateTime @default(now())

  @@id([categoryId, productId])
  @@index([categoryId])
  @@index([productId])
}

model Collection {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  slug        String    @unique
  isActive    Boolean   @default(true)
  startDate   DateTime?
  endDate     DateTime?
  products    Product[] @relation("CollectionToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  slug      String       @unique
  products  ProductTag[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model ProductTag {
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int
  createdAt DateTime @default(now())

  @@id([productId, tagId])
  @@index([productId])
  @@index([tagId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int // 1-5 stars
  title     String?
  content   String?
  isVisible Boolean  @default(true)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Order {
  id              Int           @id @default(autoincrement())
  orderNumber     String        @unique
  items           OrderItem[]
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?
  status          OrderStatus   @default(PENDING)
  totalAmount     Decimal       @db.Decimal(10, 2)
  shippingAddress Json?
  billingAddress  Json?
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  shippingMethod  String?
  shippingAmount  Decimal?      @db.Decimal(10, 2)
  taxAmount       Decimal?      @db.Decimal(10, 2)
  discountAmount  Decimal?      @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
}

model OrderItem {
  id             Int             @id @default(autoincrement())
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        Int
  product        Product         @relation(fields: [productId], references: [id])
  productId      Int
  variant        ProductVariant? @relation(fields: [variantId], references: [id])
  variantId      Int?
  name           String // Snapshot of product name at time of purchase
  sku            String // Snapshot of SKU at time of purchase
  price          Decimal         @db.Decimal(10, 2)
  quantity       Int
  discountAmount Decimal?        @db.Decimal(10, 2)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
